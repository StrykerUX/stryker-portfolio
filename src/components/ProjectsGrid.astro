---
import { projects } from '../data/projects.ts';
import OptimizedImage from './OptimizedImage.astro';

export interface Props {
  lang?: 'es' | 'en';
}

const { lang = 'es' } = Astro.props;
---

<!-- Grid principal: dos columnas, gutter 40px, ritmo vertical 48-56px -->
<section class="pb-20 bg-white transition-colors duration-300" style="background-color: var(--brand-white);">
  <div class="container mx-auto custom-padding" style="max-width: 1880px;">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-10 md:gap-20 mb-16" id="projects-grid">
      {projects.map((project, index) => (
        <article 
          class={`project-card group cursor-pointer ${index >= 6 ? 'hidden' : ''} ${project.hoverVideo ? 'has-video' : 'image-only'}`}
          data-category={project.category}
          data-index={index}
        >
          <!-- Metadatos en gris 500, cuerpo 12-13px -->
          <div class="text-xs text-gray-500 dark:text-gray-400 uppercase tracking-widest mb-2">
            {project.client} — {project.category.replace('-', ' ')} — {project.year}
          </div>

          <!-- Título en mayúsculas, 14-16px, peso 800 -->
          <h3 class="text-2xl font-extrabold text-gray-900 dark:text-white uppercase tracking-wide mb-4">
            {project.title}
          </h3>

          <!-- Miniatura grande con esquinas 20px, hover video para proyectos especiales -->
          <div class="project-image relative aspect-[5/4] overflow-hidden bg-gray-100" style="background-color: var(--gray-100); border-radius: 40px;">
            {project.image && project.image !== '/images/projects/' + project.slug + '.jpg' ? (
              <OptimizedImage 
                src={project.image} 
                alt={project.title}
                class=""
                loading="lazy"
                retries={3}
                preload={project.featured}
              />
            ) : (
              <div class="absolute inset-0 bg-gradient-to-br from-gray-200 to-gray-300 flex items-center justify-center" style="background: linear-gradient(135deg, var(--gray-100), var(--gray-300));">
                <span class="text-gray-400 dark:text-gray-500 text-sm font-medium">
                  {project.title}
                </span>
              </div>
            )}
            
            <!-- Video hover overlay -->
            {project.hoverVideo && (
              <div 
                class="video-hover-overlay absolute inset-0 opacity-0 transition-opacity duration-500 pointer-events-none z-10"
                data-video-url={project.hoverVideo}
              >
                <div class="w-full h-full bg-black flex items-center justify-center" style="border-radius: 40px;">
                  <div class="text-white text-sm">Hover para ver demo</div>
                </div>
              </div>
            )}
          </div>

          <!-- Link invisible para toda la tarjeta -->
          <a 
            href={`/${lang === 'en' ? 'en/project' : 'proyecto'}/${project.slug}`}
            class="absolute inset-0 z-20"
            aria-label={`Ver proyecto ${project.title}`}
          >
            <span class="sr-only">Ver proyecto {project.title}</span>
          </a>
        </article>
      ))}
    </div>

    <!-- Botón "Cargar más" centrado, estilo fantasma -->
    <div class="text-center" id="load-more-container">
      <button class="load-more-btn px-6 py-3 border border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 rounded-full text-sm font-medium hover:bg-black dark:hover:bg-white hover:text-white dark:hover:text-black hover:border-black dark:hover:border-white transition-all duration-300" id="load-more-btn">
        {lang === 'es' ? 'Cargar más proyectos' : 'Load more projects'}
      </button>
    </div>
  </div>
</section>

<style>
  /* Custom padding responsive */
  .custom-padding {
    padding-left: 32px;
    padding-right: 32px;
  }
  
  @media (min-width: 768px) {
    .custom-padding {
      padding-left: 120px;
      padding-right: 120px;
    }
  }
  
  .project-card {
    opacity: 1;
    transform: translateY(0);
    transition: transform 0.3s ease;
  }
  
  .project-card:hover {
    transform: translateY(-8px);
  }
  
  /* Video hover solo para cards con video */
  .project-card.has-video:hover .video-hover-overlay {
    opacity: 1;
  }
  
  /* Solo ocultar imagen cuando tiene video overlay */
  .project-card.has-video:hover .project-image img {
    opacity: 0;
  }
  
  /* Zoom suave para imágenes sin video */
  .project-card.image-only:hover .project-image img {
    transform: scale(1.1);
  }
  
  /* Transición suave para todas las imágenes */
  .project-image img {
    transition: transform 0.5s ease, opacity 0.3s ease;
    transform-origin: center;
  }
  
  .video-hover-overlay {
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(10px);
  }
  
  .video-hover-overlay iframe {
    border-radius: 40px;
    border: none;
    outline: none;
    background: transparent;
  }
  
  /* Ocultar cualquier UI residual de YouTube */
  .video-hover-overlay iframe::-webkit-media-controls {
    display: none !important;
  }
  
  .video-hover-overlay iframe::-webkit-media-controls-enclosure {
    display: none !important;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .filter-btn {
    opacity: 0;
    transform: translateY(20px);
  }

  .filter-btn.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .load-more-btn {
    opacity: 1;
    transform: translateY(0);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .project-image::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, transparent 0%, rgba(0,0,0,0.1) 100%);
    z-index: 1;
  }

  .category-badge {
    backdrop-filter: blur(10px);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const projectCards = document.querySelectorAll('.project-card');
    const loadMoreBtn = document.getElementById('load-more-btn');
    const loadMoreContainer = document.getElementById('load-more-container');
    
    let currentlyVisible = 6; // Inicialmente mostrar 6
    let filteredProjects = Array.from(projectCards); // Lista de proyectos filtrados actual
    
    // Función para actualizar la visibilidad del botón "Cargar más"
    function updateLoadMoreButton() {
      console.log('Updating load more button:');
      console.log('- Total filtered projects:', filteredProjects.length);
      console.log('- Currently visible:', currentlyVisible);
      
      if (currentlyVisible >= filteredProjects.length) {
        console.log('- Hiding button: all projects visible');
        loadMoreContainer.style.display = 'none';
      } else {
        console.log('- Showing button: more projects available');
        loadMoreContainer.style.display = 'block';
      }
    }
    
    // Función para mostrar proyectos con animación
    function showProjects(startIndex, endIndex) {
      filteredProjects.slice(startIndex, endIndex).forEach((card, i) => {
        setTimeout(() => {
          card.classList.remove('hidden');
          card.style.opacity = '0';
          card.style.transform = 'translateY(20px)';
          
          setTimeout(() => {
            card.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
          }, 50);
        }, i * 100); // Stagger animation
      });
    }
    
    // Función para aplicar filtros
    function applyFilter(filter) {
      // Reset pagination
      currentlyVisible = 6;
      
      // Ocultar todas las cards primero
      projectCards.forEach(card => {
        card.classList.add('hidden');
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
      });
      
      // Determinar qué proyectos deben mostrarse según el filtro
      if (filter === 'todos') {
        filteredProjects = Array.from(projectCards);
      } else {
        filteredProjects = Array.from(projectCards).filter(card => 
          card.getAttribute('data-category') === filter
        );
      }
      
      // Mostrar los primeros 6 proyectos filtrados
      setTimeout(() => {
        showProjects(0, Math.min(currentlyVisible, filteredProjects.length));
        updateLoadMoreButton();
      }, 300);
    }
    
    // Filter functionality
    const filterBtns = document.querySelectorAll('.filter-btn');
    
    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const filter = btn.getAttribute('data-filter');
        
        // Update active filter button
        filterBtns.forEach(b => {
          b.classList.remove('bg-black', 'dark:bg-white', 'text-white', 'dark:text-black');
          b.classList.add('bg-white', 'border-gray-200', 'text-black', 'dark:text-white');
        });
        btn.classList.remove('bg-white', 'border-gray-200', 'text-black', 'dark:text-white');
        btn.classList.add('bg-black', 'dark:bg-white', 'text-white', 'dark:text-black');
        
        // Apply filter
        applyFilter(filter);
      });
    });
    
    // Load more functionality
    loadMoreBtn.addEventListener('click', () => {
      const nextBatch = Math.min(currentlyVisible + 6, filteredProjects.length);
      showProjects(currentlyVisible, nextBatch);
      currentlyVisible = nextBatch;
      updateLoadMoreButton();
    });
    
    // Video hover functionality
    function setupVideoHover() {
      const projectCards = document.querySelectorAll('.project-card');
      
      projectCards.forEach(card => {
        const videoOverlay = card.querySelector('.video-hover-overlay');
        if (!videoOverlay) return;
        
        const videoUrl = videoOverlay.getAttribute('data-video-url');
        if (!videoUrl) return;
        
        // Extraer ID del video de YouTube
        const getYouTubeId = (url) => {
          const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
          const match = url.match(regExp);
          return (match && match[2].length === 11) ? match[2] : null;
        };
        
        const videoId = getYouTubeId(videoUrl);
        if (!videoId) return;
        
        let iframe = null;
        let isLoaded = false;
        
        // Hover in - cargar video
        card.addEventListener('mouseenter', () => {
          if (!isLoaded && videoId) {
            iframe = document.createElement('iframe');
            iframe.className = 'w-full h-full';
            iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1&controls=0&showinfo=0&rel=0&loop=1&playlist=${videoId}&modestbranding=1&iv_load_policy=3&fs=0&cc_load_policy=0&disablekb=1&autohide=1&playsinline=1&start=0&end=0`;
            iframe.frameBorder = '0';
            iframe.allow = 'autoplay; encrypted-media';
            iframe.allowFullscreen = false;
            iframe.setAttribute('scrolling', 'no');
            iframe.setAttribute('seamless', 'seamless');
            
            videoOverlay.innerHTML = '';
            videoOverlay.appendChild(iframe);
            isLoaded = true;
          }
        });
        
        // Hover out - mantener video corriendo hasta que overlay se oculte
        card.addEventListener('mouseleave', () => {
          // El video seguirá corriendo en bucle hasta que la transición CSS oculte el overlay
          // Esto asegura una experiencia fluida sin interrupciones bruscas
        });
      });
    }
    
    // Initialize - ensure only first 6 are visible and button is shown if needed
    console.log('Initializing pagination...');
    console.log('Total projects found:', projectCards.length);
    
    // Asegurar que el botón esté visible inicialmente si hay más de 6 proyectos
    if (projectCards.length > 6) {
      loadMoreContainer.style.display = 'block';
    }
    
    applyFilter('todos');
    setupVideoHover();
  });
</script>